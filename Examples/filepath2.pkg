/* Formatted by PL/Formatter v3.1.2.1 on 2000/09/16 06:52 */

CREATE OR REPLACE PACKAGE fileio
IS
   c_delim CHAR (1) := ';';

   TYPE dirs_ibtabtype IS TABLE OF VARCHAR2 (2000)
      INDEX BY BINARY_INTEGER;

   PROCEDURE setpath (str IN VARCHAR2, delim IN VARCHAR2 := c_delim);

   FUNCTION path
      RETURN VARCHAR2;

   FUNCTION pathlist
      RETURN dirs_ibtabtype;

   PROCEDURE append (onedir IN VARCHAR2);

   PROCEDURE delete (rowindex IN PLS_INTEGER := NULL);

   FUNCTION COUNT
      RETURN PLS_INTEGER;

   FUNCTION FIRST
      RETURN PLS_INTEGER;

   FUNCTION LAST
      RETURN PLS_INTEGER;

   FUNCTION NEXT (rowindex IN PLS_INTEGER := NULL)
      RETURN PLS_INTEGER;

   FUNCTION nthval (rowindex IN PLS_INTEGER := NULL)
      RETURN VARCHAR2;

   FUNCTION open (file IN VARCHAR2, loc IN VARCHAR2 := NULL)
      RETURN UTL_FILE.file_type;
END;
/

CREATE OR REPLACE PACKAGE BODY fileio
IS
   g_path VARCHAR2 (32767);
   g_delim CHAR (1) := c_delim;
   dirs dirs_ibtabtype;

   PROCEDURE setpath (str IN VARCHAR2, delim IN VARCHAR2 := c_delim)
   IS
   BEGIN
      g_path := str;
      g_delim := NVL (delim, c_delim);
      str2list.parse (str, g_delim, 'fileIO', 'append', 'delete', 'VARCHAR2(32767)');
   END;

   PROCEDURE append (onedir IN VARCHAR2)
   IS
   BEGIN
      dirs (NVL (dirs.LAST, 0) + 1) := onedir;
   END;

   PROCEDURE delete (rowindex IN PLS_INTEGER := NULL)
   IS
   BEGIN
      IF rowindex IS NULL
      THEN
         dirs.delete;
      ELSE
         dirs.delete (rowindex);
      END IF;
   END;

   FUNCTION COUNT
      RETURN PLS_INTEGER
   IS
   BEGIN
      RETURN dirs.COUNT;
   END;

   FUNCTION FIRST
      RETURN PLS_INTEGER
   IS
   BEGIN
      RETURN dirs.FIRST;
   END;

   FUNCTION LAST
      RETURN PLS_INTEGER
   IS
   BEGIN
      RETURN dirs.FIRST;
   END;

   FUNCTION NEXT (rowindex IN PLS_INTEGER := NULL)
      RETURN PLS_INTEGER
   IS
   BEGIN
      RETURN dirs.NEXT (rowindex);
   END;

   FUNCTION nthval (rowindex IN PLS_INTEGER := NULL)
      RETURN VARCHAR2
   IS
   BEGIN
      RETURN dirs (rowindex);
   END;

   FUNCTION path
      RETURN VARCHAR2
   IS
   BEGIN
      RETURN g_path;
   END;

   FUNCTION pathlist
      RETURN dirs_ibtabtype
   IS
   BEGIN
      RETURN dirs;
   END;

   FUNCTION open (file IN VARCHAR2, loc IN VARCHAR2 := NULL)
      RETURN UTL_FILE.file_type
   IS
      indx PLS_INTEGER;
      /* Location of next path separator */
      v_lastsep PLS_INTEGER := 1;
      v_sep PLS_INTEGER := INSTR (g_path, c_delim);
      v_dir VARCHAR2 (500);
      retval UTL_FILE.file_type;

      PROCEDURE set_next_dir
      IS
      BEGIN
         v_sep := INSTR (g_path, c_delim, v_sep + 1);

         IF v_sep = 0
         THEN
            v_dir := SUBSTR (g_path, v_lastsep);
         ELSE
            v_dir := SUBSTR (g_path, v_lastsep, v_sep - v_lastsep);
         END IF;
      END;
   BEGIN
      IF loc IS NOT NULL
      THEN
         indx := NULL;
         v_dir := loc;
      ELSE
         indx := dirs.FIRST;
         v_dir := dirs (indx);
      END IF;

      WHILE v_dir IS NOT NULL
      LOOP
         BEGIN
            --DBMS_OUTPUT.PUT_LINE ('...looking in ' || v_dir);
            retval := UTL_FILE.fopen (v_dir, file, 'R');
            EXIT;
         EXCEPTION
            WHEN OTHERS
            THEN
               indx := dirs.NEXT (indx);

               IF indx IS NULL
               THEN
                  v_dir := NULL;
               ELSE
                  v_dir := dirs (indx);
               END IF;
         END;
      END LOOP;

      RETURN retval;
   END;
END;
/
