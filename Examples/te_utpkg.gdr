#===========================================================RevealNet GenX Driver==========
# Description: Create package to perform unit testing against base package with utPLSQL.
#==========================================================================================
# Category: Unit Test Package for Table Encapsulation package
#==========================================================================================
# Summary: Designed to be a DOUBLE PASS generation. Generate once against the
#          package, then generate this output against the base table!
#
# WARNING: Generating duplicate of entire package!
#
#==========================================================================================
# Application area: Testing
#==========================================================================================
# Key words: PLSQL,PROG,ARG,UTPLSQL
#==========================================================================================
# Script Requirements/Dependencies
#    Backend Version: PL/SQL 2.3 (Oracle 7.3) and above
#    INCLUDEs: None
#    EXECs: None
#==========================================================================================
# Generated Text Requirements/Dependencies
#    Language and Version: PL/SQL 2.3 (Oracle 7.3) and above
#    Operating System(s): Non-specific
#==========================================================================================
# Author: Steven Feuerstein, RevealNet: feuerstein@revealnet.com
#==========================================================================================
# Modification History
# 
# When      Who        What
# -----------------------------------------------------------------------------------------
# 05/2000   SEF        Created
#==========================================================================================
[SETALIAS]allprogs[TO]N
[SETALIAS]utprefix[TO]ut_
[SETALIAS]tabprefix[TO]{utprefix}
[SETALIAS]olprog[TO]\[progname][overload]
[SETALIAS]progtab[TO]\{tabprefix}{olprog}
[SETALIAS]oltestprog[TO]\{utprefix}{olprog}
[STOREIN]{utprefix}[objname].gdr
[ASIS]
[SET]objname[TO]#CHANGE THIS
[SETALIAS]tabprefix[TO]{utprefix}
[ENDASIS]
CREATE OR REPLACE PACKAGE [schema].{utprefix}[objname] AUTHID CURRENT_USER
-- SECOND PASS INSTRUCTIONS:
--
-- Set the object name and generate this GDR to produce the test package.
-- After generation, save to pks and pkb files and put in the specific
-- code for the various tests.
IS
   PROCEDURE {utprefix}setup;
   
   PROCEDURE {utprefix}teardown;

[FOREACH]prog
   [IF]{allprogs}[EQ]Y[OR][progname][LIKE]UPD%[OR][progname][LIKE]INS%[OR][progname][LIKE]DEL%
   PROCEDURE ^{oltestprog}^;
   [ENDIF]
[ENDFOREACH]
   
END {utprefix}[objname];
/
CREATE OR REPLACE PACKAGE BODY [schema].{utprefix}[objname] AUTHID CURRENT_USER
IS
   PROCEDURE {utprefix}setup
   IS
   BEGIN
      -- Clean start
      {utprefix}teardown;
[ASIS]   
      -- Generic copy of base table for testing 
      EXECUTE IMMEDIATE 
         'CREATE TABLE {tabprefix}[objname] AS
            SELECT * FROM [objname]';
            
[ENDASIS]   
   [FOREACH]prog
   [IF]{allprogs}[EQ]Y[OR][progname][LIKE]UPD%[OR][progname][LIKE]INS%[OR][progname][LIKE]DEL%
      -- Create copy of base table for this unit test.
      EXECUTE IMMEDIATE 
         'CREATE TABLE ^{progtab}^ AS
[ASIS]   
            SELECT * FROM [objname]';
[ENDASIS]   
            
   [ENDIF]
   [ENDFOREACH]
   END;
   
   PROCEDURE {utprefix}teardown
   IS
   BEGIN
[ASIS]   
      BEGIN
         EXECUTE IMMEDIATE 'DROP TABLE {tabprefix}[objname]';
      EXCEPTION WHEN OTHERS THEN NULL;
      END;      
[ENDASIS]   
            
   [FOREACH]prog
   [IF]{allprogs}[EQ]Y[OR][progname][LIKE]UPD%[OR][progname][LIKE]INS%[OR][progname][LIKE]DEL%
      BEGIN
         EXECUTE IMMEDIATE 'DROP TABLE ^{progtab}^';
      EXCEPTION WHEN OTHERS THEN NULL;
      END;      
   [ENDIF]
   [ENDFOREACH]
   END;
[FOREACH]prog
   [IF]{allprogs}[EQ]Y[OR][progname][LIKE]UPD%[OR][progname][LIKE]INS%[OR][progname][LIKE]DEL%

   PROCEDURE {utprefix}{utprefix}[progname][overload]
   IS
[IF][progname][LIKE]INS%[OR][progname][LIKE]UPD%
[ASIS]
[FOREACH]col
      v_[colname] [objname].[colname]%TYPE;
[ENDFOREACH]
[ENDASIS]
[ENDIF]
      fdbk PLS_INTEGER;         
   BEGIN  
      -- Perform [progname] operation(s) using
      -- explicit actions to measURE {utprefix}against.
      
      EXECUTE IMMEDIATE '
      [IF][progname][LIKE]INS%
      INSERT INTO ^{progtab}^ (
[ASIS]         
[FOREACH]col[between],
         [colname]
[ENDFOREACH]         
      )
      VALUES (
[FOREACH]col[between],
         :[colname]
[ENDFOREACH]         
      )'
      USING
[FOREACH]col[between],
         v_[colname]
[ENDFOREACH]
      ;         
[ENDASIS]         
      [ELSIF][progname][LIKE]UPD%
      UPDATE ^{progtab}^ SET
[ASIS]         
[FOREACH]nonpkycol[between],
         [colname] = :[colname]
[ENDFOREACH]         
       WHERE
[FOREACH]pkycol[between] AND
          [colname] = [coldmlval]
[ENDFOREACH]
      '
      USING
[FOREACH]col[between],
         v_[colname]
[ENDFOREACH]
[ENDASIS]         
      ;
      [ELSIF][progname][LIKE]DEL%
      DELETE FROM ^{progtab}^
       WHERE
[ASIS]         
[FOREACH]pkycol[between] AND
          [colname] = [coldmlval]
[ENDFOREACH]
[ENDASIS]         
      ';
      [ENDIF]
      
      -- Compare to program call:
      [progname] (
      ,rowcount => fdbk
      );
      
      -- Test results    
      utAssert.eqtable (
         'Successful [progname][overload]',
[ASIS]
         '[objname]',
[ENDASIS]          
         '^{progtab}^');
         
      ROLLBACK;
   EXCEPTION
      WHEN OTHERS 
      THEN
         -- Force registration of test failure.
         utAssert.this (
            '^{progtab}^ exception ' || SQLERRM,
            SQLCODE = 0);
   END;
   [ENDIF]
[ENDFOREACH]
   
END {utprefix}[objname];
/
